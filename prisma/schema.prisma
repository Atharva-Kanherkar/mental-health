
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  timezone      String?
  memoryVault   MemoryVault?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  emailVerified Boolean      @default(false)
  image         String?
  sessions      Session[]
  accounts      Account[]

  // Journaling & Mental Health
  journalEntries       JournalEntry[]
  dailyCheckIns        DailyCheckIn[]
  userRewards          UserReward[]
  streaks              Streak[]
  achievements         UserAchievement[]
  
  // Comprehensive Mental Health Assessment
  mentalHealthProfile  MentalHealthProfile?
  assessmentResponses  AssessmentResponse[]
  medicationHistory    MedicationHistory[]
  therapyHistory       TherapyHistory[]
  crisisEvents         CrisisEvent[]
  
  // Gamification stats
  totalPoints          Int @default(0)
  currentLevel         Int @default(1)

  // Report sharing
  sharedReports        SharedReport[]

  @@map("user")
}

model MemoryVault {
  id        String      @id @default(uuid())
  userId    String      @unique
  user      User        @relation(fields: [userId], references: [id])
  favPeople FavPerson[]
  memories  Memory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //what remains is just the AI meta data for now. 
}

model JournalEntry {
  id        String @id @default(uuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  
  // Content
  title     String
  content   String
  mediaType String? // "image" | "audio" | "video"
  mediaUrl  String?
  
  // AI Analysis
  aiSentiment         String? // "positive" | "neutral" | "negative"
  aiMoodTags          String[] // ["happy", "anxious", "calm"]
  aiWellnessScore     Float?   // 0.0 to 10.0
  aiInsights          String?  // AI-generated insights
  aiThemes            String[] // ["gratitude", "stress", "achievement"]
  aiSupportiveMessage String?  // Personalized supportive message from AI
  
  // Mental Health Tracking
  overallMood      Int?     // 1-10 scale
  energyLevel      Int?     // 1-10 scale  
  anxietyLevel     Int?     // 1-10 scale
  stressLevel      Int?     // 1-10 scale
  
  // Privacy & Memory
  privacyLevel              String @default("server_managed") // "zero_knowledge" | "server_managed"
  convertToMemory           Boolean @default(false)
  associatedMemoryId        String?
  
  // Rewards earned from this entry
  pointsEarned              Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Daily mental health check-ins with specific questions
model DailyCheckIn {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  date   DateTime @default(now()) // Date of check-in
  
  // Core mental health questions
  overallMood        Int     // 1-10: How do you feel today?
  energyLevel        Int     // 1-10: Energy level
  sleepQuality       Int?    // 1-10: How well did you sleep?
  stressLevel        Int     // 1-10: Stress level
  anxietyLevel       Int     // 1-10: Anxiety level
  
  // Safety questions (critical for mental health)
  hadSelfHarmThoughts  Boolean @default(false) // Did you have thoughts of self-harm?
  hadSuicidalThoughts  Boolean @default(false) // Did you have suicidal thoughts?
  actedOnHarm         Boolean @default(false) // Did you engage in self-harm?
  
  // Positive behaviors
  exercised           Boolean @default(false) // Did you exercise?
  ateWell            Boolean @default(false) // Did you eat well?
  socializedHealthily Boolean @default(false) // Did you connect with others?
  practicedSelfCare   Boolean @default(false) // Did you practice self-care?
  tookMedication      Boolean @default(false) // Did you take prescribed medication?
  
  // Optional reflection
  gratefulFor         String? // What are you grateful for?
  challengesToday     String? // What challenged you?
  accomplishments     String? // What did you accomplish?
  
  // Points earned for this check-in
  pointsEarned        Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Ensure one check-in per user per day
  @@unique([userId, date])
}

// Reward definitions
model Reward {
  id          String @id @default(uuid())
  name        String
  description String
  type        String // "streak" | "milestone" | "behavior" | "wellness"
  
  // Reward conditions
  pointValue       Int     // Points awarded
  requiredCount    Int?    // Required count for milestone rewards
  requiredDays     Int?    // Required days for streak rewards
  behaviorType     String? // Type of behavior needed
  
  // Availability
  isActive         Boolean @default(true)
  maxClaimsPerUser Int?    // Null = unlimited
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userRewards UserReward[]
}

// User's earned rewards
model UserReward {
  id       String @id @default(uuid())
  userId   String
  rewardId String
  user     User   @relation(fields: [userId], references: [id])
  reward   Reward @relation(fields: [rewardId], references: [id])
  
  pointsEarned Int
  earnedAt     DateTime @default(now())
  
  // Prevent duplicate rewards
  @@unique([userId, rewardId])
}

// Streak tracking for consistent behaviors
model Streak {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  type           String   // "journaling" | "checkin" | "no_self_harm" | "positive_mood"
  currentStreak  Int      @default(0)
  longestStreak  Int      @default(0)
  lastActiveDate DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // One streak per user per type
  @@unique([userId, type])
}

// Achievement definitions
model Achievement {
  id          String @id @default(uuid())
  name        String
  description String
  category    String // "writing" | "wellness" | "safety" | "consistency"
  
  // Achievement conditions
  requiredValue    Int?    // Required value to unlock
  requiredStreak   Int?    // Required streak length
  behaviorType     String? // Specific behavior required
  
  // Metadata
  iconName    String? // Icon for frontend
  rarity      String @default("common") // "common" | "rare" | "epic" | "legendary"
  pointReward Int @default(0)
  
  isActive Boolean @default(true)
  
  createdAt DateTime @default(now())
  
  // Relations
  userAchievements UserAchievement[]
}

// User's unlocked achievements
model UserAchievement {
  id            String @id @default(uuid())
  userId        String
  achievementId String
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  
  unlockedAt DateTime @default(now())
  
  // Prevent duplicate achievements
  @@unique([userId, achievementId])
}
model Memory {
  id      String      @id @default(uuid())
  vaultId String
  vault   MemoryVault @relation(fields: [vaultId], references: [id])
  title   String      @default("Untitled")
  type      String // "text" | "image" | "audio" | "video"
  content   String? // text content

  // Privacy level determines bucket and access permissions
  privacyLevel String @default("server_managed") // "zero_knowledge" | "server_managed"

  // Flag to distinguish attachments (profile photos, voice/video notes) from actual memories
  isAttachment Boolean @default(false)
  
  // Encrypted file storage fields
  fileUrl   String? // DigitalOcean Spaces URL (for encrypted files)
  fileKey   String? // Storage key in DigitalOcean Spaces
  fileName  String? // Original filename
  fileMimeType String? // Original MIME type
  fileSize  Int? // File size in bytes
  
  // Client-side encryption metadata (only for zero_knowledge)
  encryptionIV String? // Initialization Vector for decryption
  encryptionAuthTag String? // Authentication tag for AES-GCM (optional)
  isEncrypted Boolean @default(false) // Flag to indicate if file is encrypted
  
  createdAt DateTime @default(now())
  associatedPerson FavPerson? @relation(fields: [associatedPersonId], references: [id])
  associatedPersonId String?
}

model FavPerson {
  id      String      @id @default(uuid())
  vaultId String
  vault   MemoryVault @relation(fields: [vaultId], references: [id])
  
  name         String
  relationship String
  phoneNumber  String?
  email        String?
  priority     Int // e.g. 1 = highest importance
  timezone     String?

  supportMsg   String?
  voiceNoteUrl String? // file upload storage URI
  videoNoteUrl String? // file upload storage URI
  photoUrl     String?

  personaMetadata Json? // AI-specific metadata (tone, style, phrases, etc.)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memories Memory[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// Comprehensive Mental Health Assessment Models
// Based on scientific research and standardized psychological instruments

// Main mental health profile for each user
model MentalHealthProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Demographics and Background (encrypted)
  age                    Int?
  gender                 String? // "male" | "female" | "non-binary" | "prefer-not-to-say" | "other"
  occupation             String?
  educationLevel         String? // "high-school" | "some-college" | "bachelor" | "master" | "doctorate" | "other"
  relationshipStatus     String? // "single" | "partnered" | "married" | "divorced" | "widowed" | "other"
  livingArrangement      String? // "alone" | "family" | "roommates" | "partner" | "other"
  
  // Current Mental Health Status
  primaryConcerns        String[] // ["depression", "anxiety", "ptsd", "bipolar", "adhd", "eating-disorder", "substance-abuse", "other"]
  diagnosedConditions    String[] // Formally diagnosed conditions
  symptomSeverity        String? // "mild" | "moderate" | "severe" | "very-severe"
  symptomDuration        String? // "days" | "weeks" | "months" | "years"
  
  // Risk Assessment (highly encrypted)
  suicidalIdeation       Boolean @default(false)
  selfHarmHistory        Boolean @default(false)
  substanceUseRisk       String? // "none" | "low" | "moderate" | "high"
  eatingDisorderRisk     String? // "none" | "low" | "moderate" | "high"
  
  // Treatment History
  hasTherapyHistory      Boolean @default(false)
  hasMedicationHistory   Boolean @default(false)
  hasHospitalization     Boolean @default(false)
  
  // Support System
  familySupport          String? // "none" | "limited" | "moderate" | "strong"
  friendSupport          String? // "none" | "limited" | "moderate" | "strong"
  professionalSupport    String? // "none" | "limited" | "moderate" | "strong"
  
  // Lifestyle Factors
  sleepQuality           String? // "very-poor" | "poor" | "fair" | "good" | "excellent"
  exerciseFrequency      String? // "never" | "rarely" | "sometimes" | "often" | "daily"
  nutritionQuality       String? // "very-poor" | "poor" | "fair" | "good" | "excellent"
  socialConnection       String? // "very-isolated" | "isolated" | "some-connection" | "well-connected" | "very-connected"
  
  // Privacy and Consent
  privacyLevel           String @default("zero_knowledge") // All mental health data should be encrypted
  consentToAnalysis      Boolean @default(false)
  consentToInsights      Boolean @default(false)
  dataRetentionPeriod    Int @default(365) // Days to retain data
  
  // Metadata
  lastAssessmentDate     DateTime?
  profileCompleteness    Float @default(0.0) // 0.0 to 1.0
  riskLevel              String @default("unknown") // "low" | "moderate" | "high" | "crisis"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Standardized assessment responses (PHQ-9, GAD-7, PCL-5, etc.)
model AssessmentResponse {
  id           String @id @default(uuid())
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Assessment metadata
  assessmentType    String // "PHQ-9" | "GAD-7" | "PCL-5" | "MDQ" | "AUDIT" | "MINI" | "custom"
  assessmentVersion String @default("1.0")
  
  // Responses (encrypted JSON)
  responses         Json   // {"q1": 2, "q2": 1, "q3": 3, ...}
  totalScore        Int?   // Calculated total score
  severity          String? // "minimal" | "mild" | "moderate" | "moderately-severe" | "severe"
  
  // Clinical interpretation
  interpretation    String? // Clinical meaning of the score
  recommendations   String[] // ["therapy", "medication-consultation", "lifestyle-changes", "crisis-intervention"]
  flagged           Boolean @default(false) // Flagged for high risk
  
  // Context
  triggeredBy       String? // What triggered this assessment
  notes            String? // Additional notes
  
  createdAt DateTime @default(now())
  
  @@index([userId, assessmentType])
}

// Medication tracking
model MedicationHistory {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Medication details (encrypted)
  medicationName    String
  dosage           String?
  frequency        String? // "daily" | "twice-daily" | "weekly" | "as-needed" | "other"
  prescribedBy     String? // Doctor's name (encrypted)
  
  // Status
  isCurrentlyTaking Boolean @default(true)
  startDate        DateTime?
  endDate          DateTime?
  
  // Effectiveness and side effects
  effectiveness    String? // "very-ineffective" | "ineffective" | "somewhat-effective" | "effective" | "very-effective"
  sideEffects      String[] // List of side effects experienced
  adherence        String? // "never" | "rarely" | "sometimes" | "often" | "always"
  
  // Notes
  reasonForStopping String?
  notes            String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, isCurrentlyTaking])
}

// Therapy and treatment history
model TherapyHistory {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Therapy details (encrypted)
  therapyType      String // "CBT" | "DBT" | "psychodynamic" | "humanistic" | "family" | "group" | "other"
  providerType     String // "psychiatrist" | "psychologist" | "counselor" | "social-worker" | "other"
  providerName     String? // Encrypted
  
  // Duration and frequency
  startDate        DateTime?
  endDate          DateTime?
  frequency        String? // "weekly" | "bi-weekly" | "monthly" | "as-needed"
  sessionCount     Int?
  
  // Outcomes
  effectiveness    String? // "very-ineffective" | "ineffective" | "somewhat-effective" | "effective" | "very-effective"
  reasonForEnding  String? // "completed" | "no-longer-needed" | "not-helpful" | "cost" | "scheduling" | "other"
  
  // Current status
  isOngoing        Boolean @default(false)
  
  notes            String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, isOngoing])
}

// Crisis events and emergency situations
model CrisisEvent {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Crisis details (highly encrypted)
  crisisType       String // "suicidal-ideation" | "suicide-attempt" | "self-harm" | "panic-attack" | "psychotic-episode" | "substance-overdose" | "other"
  severity         String // "mild" | "moderate" | "severe" | "life-threatening"
  
  // Context
  triggeringEvents String[] // Factors that led to the crisis
  warningSignsUsed String[] // Warning signs that were present
  copingStrategies String[] // What was tried to manage the crisis
  
  // Response and outcome
  interventionUsed String[] // ["self-care", "friend-support", "family-support", "crisis-hotline", "emergency-room", "hospitalization", "therapy-session"]
  outcome          String? // "resolved" | "ongoing" | "worsened" | "hospitalized"
  
  // Follow-up
  followUpNeeded   Boolean @default(false)
  followUpReceived Boolean @default(false)
  
  // Safety planning
  safetyPlanUsed   Boolean @default(false)
  safetyPlanEffective Boolean?
  
  notes            String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, crisisType])
  @@index([userId, createdAt])
}

// Standardized assessment questionnaires
model AssessmentQuestionnaire {
  id          String @id @default(uuid())
  
  // Questionnaire metadata
  name        String   // "Patient Health Questionnaire-9" | "Generalized Anxiety Disorder-7" | etc.
  shortName   String   // "PHQ-9" | "GAD-7" | "PCL-5" | etc.
  version     String   @default("1.0")
  
  // Scientific validity
  validated   Boolean  @default(true)
  reliability Float?   // Cronbach's alpha or similar
  reference   String?  // Scientific paper reference
  
  // Questionnaire structure (JSON)
  questions   Json     // Array of question objects with text, type, options, scoring
  scoring     Json     // Scoring algorithm and interpretation ranges
  
  // Usage metadata
  isActive    Boolean  @default(true)
  category    String   // "depression" | "anxiety" | "trauma" | "bipolar" | "substance-use" | "general"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([shortName, version])
}

// Shared reports for therapists
model SharedReport {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Share token and password
  shareToken    String @unique
  passwordHash  String

  // Report metadata
  reportType    String // "weekly" | "monthly" | "comprehensive"
  reportData    Json   // Complete report data

  // Timestamps
  generatedAt   DateTime @default(now())
  expiresAt     DateTime
  accessedAt    DateTime?

  // Access control
  accessCount   Int @default(0)
  maxAccess     Int @default(10)
  isActive      Boolean @default(true)

  @@index([shareToken])
  @@index([expiresAt])
  @@index([userId])
}

