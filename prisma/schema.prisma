
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  timezone      String?
  memoryVault   MemoryVault?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  emailVerified Boolean      @default(false)
  image         String?
  sessions      Session[]
  accounts      Account[]

  // Journaling & Mental Health
  journalEntries    JournalEntry[]
  dailyCheckIns     DailyCheckIn[]
  userRewards       UserReward[]
  streaks           Streak[]
  achievements      UserAchievement[]
  
  // Gamification stats
  totalPoints       Int @default(0)
  currentLevel      Int @default(1)
  
  @@map("user")
}

model MemoryVault {
  id        String      @id @default(uuid())
  userId    String      @unique
  user      User        @relation(fields: [userId], references: [id])
  favPeople FavPerson[]
  memories  Memory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //what remains is just the AI meta data for now. 
}

model JournalEntry {
  id        String @id @default(uuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  
  // Content
  title     String
  content   String
  mediaType String? // "image" | "audio" | "video"
  mediaUrl  String?
  
  // AI Analysis
  aiSentiment         String? // "positive" | "neutral" | "negative"
  aiMoodTags          String[] // ["happy", "anxious", "calm"]
  aiWellnessScore     Float?   // 0.0 to 10.0
  aiInsights          String?  // AI-generated insights
  aiThemes            String[] // ["gratitude", "stress", "achievement"]
  aiSupportiveMessage String?  // Personalized supportive message from AI
  
  // Mental Health Tracking
  overallMood      Int?     // 1-10 scale
  energyLevel      Int?     // 1-10 scale  
  anxietyLevel     Int?     // 1-10 scale
  stressLevel      Int?     // 1-10 scale
  
  // Privacy & Memory
  privacyLevel              String @default("server_managed") // "zero_knowledge" | "server_managed"
  convertToMemory           Boolean @default(false)
  associatedMemoryId        String?
  
  // Rewards earned from this entry
  pointsEarned              Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Daily mental health check-ins with specific questions
model DailyCheckIn {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  date   DateTime @default(now()) // Date of check-in
  
  // Core mental health questions
  overallMood        Int     // 1-10: How do you feel today?
  energyLevel        Int     // 1-10: Energy level
  sleepQuality       Int?    // 1-10: How well did you sleep?
  stressLevel        Int     // 1-10: Stress level
  anxietyLevel       Int     // 1-10: Anxiety level
  
  // Safety questions (critical for mental health)
  hadSelfHarmThoughts  Boolean @default(false) // Did you have thoughts of self-harm?
  hadSuicidalThoughts  Boolean @default(false) // Did you have suicidal thoughts?
  actedOnHarm         Boolean @default(false) // Did you engage in self-harm?
  
  // Positive behaviors
  exercised           Boolean @default(false) // Did you exercise?
  ateWell            Boolean @default(false) // Did you eat well?
  socializedHealthily Boolean @default(false) // Did you connect with others?
  practicedSelfCare   Boolean @default(false) // Did you practice self-care?
  tookMedication      Boolean @default(false) // Did you take prescribed medication?
  
  // Optional reflection
  gratefulFor         String? // What are you grateful for?
  challengesToday     String? // What challenged you?
  accomplishments     String? // What did you accomplish?
  
  // Points earned for this check-in
  pointsEarned        Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Ensure one check-in per user per day
  @@unique([userId, date])
}

// Reward definitions
model Reward {
  id          String @id @default(uuid())
  name        String
  description String
  type        String // "streak" | "milestone" | "behavior" | "wellness"
  
  // Reward conditions
  pointValue       Int     // Points awarded
  requiredCount    Int?    // Required count for milestone rewards
  requiredDays     Int?    // Required days for streak rewards
  behaviorType     String? // Type of behavior needed
  
  // Availability
  isActive         Boolean @default(true)
  maxClaimsPerUser Int?    // Null = unlimited
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userRewards UserReward[]
}

// User's earned rewards
model UserReward {
  id       String @id @default(uuid())
  userId   String
  rewardId String
  user     User   @relation(fields: [userId], references: [id])
  reward   Reward @relation(fields: [rewardId], references: [id])
  
  pointsEarned Int
  earnedAt     DateTime @default(now())
  
  // Prevent duplicate rewards
  @@unique([userId, rewardId])
}

// Streak tracking for consistent behaviors
model Streak {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  type           String   // "journaling" | "checkin" | "no_self_harm" | "positive_mood"
  currentStreak  Int      @default(0)
  longestStreak  Int      @default(0)
  lastActiveDate DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // One streak per user per type
  @@unique([userId, type])
}

// Achievement definitions
model Achievement {
  id          String @id @default(uuid())
  name        String
  description String
  category    String // "writing" | "wellness" | "safety" | "consistency"
  
  // Achievement conditions
  requiredValue    Int?    // Required value to unlock
  requiredStreak   Int?    // Required streak length
  behaviorType     String? // Specific behavior required
  
  // Metadata
  iconName    String? // Icon for frontend
  rarity      String @default("common") // "common" | "rare" | "epic" | "legendary"
  pointReward Int @default(0)
  
  isActive Boolean @default(true)
  
  createdAt DateTime @default(now())
  
  // Relations
  userAchievements UserAchievement[]
}

// User's unlocked achievements
model UserAchievement {
  id            String @id @default(uuid())
  userId        String
  achievementId String
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  
  unlockedAt DateTime @default(now())
  
  // Prevent duplicate achievements
  @@unique([userId, achievementId])
}
model Memory {
  id      String      @id @default(uuid())
  vaultId String
  vault   MemoryVault @relation(fields: [vaultId], references: [id])

  type      String // "text" | "image" | "audio" | "video"
  content   String? // text content
  
  // Privacy level determines bucket and access permissions
  privacyLevel String @default("server_managed") // "zero_knowledge" | "server_managed"
  
  // Encrypted file storage fields
  fileUrl   String? // DigitalOcean Spaces URL (for encrypted files)
  fileKey   String? // Storage key in DigitalOcean Spaces
  fileName  String? // Original filename
  fileMimeType String? // Original MIME type
  fileSize  Int? // File size in bytes
  
  // Client-side encryption metadata (only for zero_knowledge)
  encryptionIV String? // Initialization Vector for decryption
  encryptionAuthTag String? // Authentication tag for AES-GCM (optional)
  isEncrypted Boolean @default(false) // Flag to indicate if file is encrypted
  
  createdAt DateTime @default(now())
  associatedPerson FavPerson? @relation(fields: [associatedPersonId], references: [id])
  associatedPersonId String?
}

model FavPerson {
  id      String      @id @default(uuid())
  vaultId String
  vault   MemoryVault @relation(fields: [vaultId], references: [id])
  
  name         String
  relationship String
  phoneNumber  String?
  email        String?
  priority     Int // e.g. 1 = highest importance
  timezone     String?

  supportMsg   String?
  voiceNoteUrl String? // file upload storage URI
  videoNoteUrl String? // file upload storage URI
  photoUrl     String?

  personaMetadata Json? // AI-specific metadata (tone, style, phrases, etc.)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memories Memory[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

